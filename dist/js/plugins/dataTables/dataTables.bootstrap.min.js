//http://datatables.net/plug-ins/pagination#bootstrap
$.extend(true, $.fn.dataTable.defaults, {
  "sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
  "sPaginationType": "bootstrap",
  "oLanguage": {
    "sLengthMenu": "Display _MENU_ records"
  }
});
(function (b) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (a) {
    return b(a, window, document)
  }) : "object" === typeof exports ? module.exports = function (a, d) {
    a || (a = window);
    if (!d || !d.fn.dataTable) d = require("datatables.net")(a, d).$;
    return b(d, a, a.document)
  } : b(jQuery, window, document)
})(function (b, a, d, m) {
  var f = b.fn.dataTable;
  b.extend(f.ext.classes, {
    sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
    sFilterInput: "form-control input-sm",
    sLengthSelect: "form-control input-sm",
    sProcessing: "dataTables_processing panel panel-default"
  });
})
/* API method to get paging information */
$.fn.dataTableExt.oApi.fnPagingInfo = function (oSettings) {
  return {
    "iStart": oSettings._iDisplayStart,
    "iEnd": oSettings.fnDisplayEnd(),
    "iLength": oSettings._iDisplayLength,
    "iTotal": oSettings.fnRecordsTotal(),
    "iFilteredTotal": oSettings.fnRecordsDisplay(),
    "iPage": Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength),
    "iTotalPages": Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength)
  };
}

/* Bootstrap style pagination control */
$.extend($.fn.dataTableExt.oPagination, {
  "bootstrap": {
    "fnInit": function (oSettings, nPaging, fnDraw) {
      var oLang = oSettings.oLanguage.oPaginate;
      var fnClickHandler = function (e) {
        e.preventDefault();
        if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {
          fnDraw(oSettings);
        }
      };

      $(nPaging).append(
        '<div class="gopage-container input-group">' +
        '<input class="form-control input-sm" id="goPageVal" value="1" placeholder="跳页"/>' +
        '<span class="input-group-btn"><button class="btn btn-primary btn-sm" id="goPage" type="button" value="">跳转</button></span>' +
        '</div>'
      );
      $(nPaging).append(
        '<ul class="pagination">' +
        '<li class="prev disabled"><a href="#" title="' + oLang.sFirst + '"><i class="fas fa-angle-double-left"></i></a></li>' +
        '<li class="prev disabled"><a href="#" title="' + oLang.sPrevious + '"><i class="fas fa-angle-left"></i></a></li>' +
        '<li class="next disabled"><a href="#" title="' + oLang.sNext + '"><i class="fas fa-angle-right"></i></a></li>' +
        '<li class="next disabled"><a href="#" title="' + oLang.sLast + '"><i class="fas fa-angle-double-right"></i></a></li>' +
        '</ul>'
      );
      //datatables分页跳转  
      $(nPaging).find("#goPage").click(function (e) {
        var ipage = parseInt($("#goPageVal").val());
        var oPaging = oSettings.oInstance.fnPagingInfo();
        if (oPaging.iTotalPages < ipage) {
          $("#goPageVal").val(oPaging.iTotalPages);
          ipage = oPaging.iTotalPages;
        }
        if (!ipage || ipage < 1) {
          $("#goPageVal").val(1);
          ipage = 1;
        }

        oSettings._iDisplayStart = (ipage - 1) * oPaging.iLength;
        fnDraw(oSettings);
      });
      var els = $('a', nPaging);
      $(els[0]).bind('click.DT', {
        action: "first"
      }, fnClickHandler);
      $(els[1]).bind('click.DT', {
        action: "previous"
      }, fnClickHandler);
      $(els[2]).bind('click.DT', {
        action: "next"
      }, fnClickHandler);
      $(els[3]).bind('click.DT', {
        action: "last"
      }, fnClickHandler);
    },
    "fnUpdate": function (oSettings, fnDraw) {
      var iListLength = 5;
      var oPaging = oSettings.oInstance.fnPagingInfo();
      var an = oSettings.aanFeatures.p;
      var i, ien, j, sClass, iStart, iEnd, iHalf = Math.floor(iListLength / 2);

      if (oPaging.iTotalPages < iListLength) {
        iStart = 1;
        iEnd = oPaging.iTotalPages;
      } else if (oPaging.iPage <= iHalf) {
        iStart = 1;
        iEnd = iListLength;
      } else if (oPaging.iPage >= (oPaging.iTotalPages - iHalf)) {
        iStart = oPaging.iTotalPages - iListLength + 1;
        iEnd = oPaging.iTotalPages;
      } else {
        iStart = oPaging.iPage - iHalf + 1;
        iEnd = iStart + iListLength - 1;
      }

      for (i = 0, ien = an.length; i < ien; i++) {
        // Remove the middle elements
        ($('li:gt(1)', an[i]).filter(':not(:last)')).filter(':not(:last)').remove();

        // Add the new list items and their event handlers
        for (j = iStart; j <= iEnd; j++) {
          sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
          $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
            .insertBefore($('.next', an[i])[0])
            .bind('click', function (e) {
              e.preventDefault();
              oSettings._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
              fnDraw(oSettings);
            });
        }

        // Add / remove disabled classes from the static elements
        if (oPaging.iPage === 0) {
          $('li:lt(2)', an[i]).addClass('disabled');
        } else {
          $('li:lt(2)', an[i]).removeClass('disabled');
        }

        if (oPaging.iPage === oPaging.iTotalPages - 1 || oPaging.iTotalPages === 0) {
          $('.next', an[i]).addClass('disabled');
          $('li:last', an[i]).addClass('disabled');
        } else {
          $('.next', an[i]).removeClass('disabled');
          $('li:last', an[i]).removeClass('disabled');
        }
      }
    }
  }
});